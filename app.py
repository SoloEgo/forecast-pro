# app.py
import io
import os
import re
import shutil
from pathlib import Path
import traceback
from typing import Optional, List, Tuple

import pandas as pd
import numpy as np
import streamlit as st
from PIL import Image
import plotly.graph_objects as go
from base64 import b64encode

# ====== –Ω–∞—à–∏ –º–æ–¥—É–ª–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ —É —Ç–µ–±—è) ======
from src.pro.optimize import main as optimize_main
from src.pro.smart_train import main as smart_train_main
from src.pro.forecast import main as forecast_main

import lightgbm as lgb

class _SilentLGBLogger:
    def info(self, msg): 
        pass
    def warning(self, msg): 
        pass

lgb.register_logger(_SilentLGBLogger())

# ====== —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å rerun ======
try:
    _rerun = st.rerun            # –Ω–æ–≤—ã–µ –≤–µ—Ä—Å–∏–∏ (>=1.30)
except AttributeError:
    _rerun = st.experimental_rerun  # —Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏

def rerun():
    _rerun()

err_box = st.empty()

# ====== –ª–æ–≥–æ—Ç–∏–ø—ã ======
LOGO_BIG = "assets/logo_forecastpro_transparent.png"
LOGO_ICO  = "assets/logo_forecastpro_128.png"

# ====== set_page_config ======
page_icon = "üìà"
try:
    if Path(LOGO_ICO).exists():
        page_icon = Image.open(LOGO_ICO)
except Exception:
    pass
st.set_page_config(page_title="ForecastPro", page_icon=page_icon, layout="wide")

# ====== CSS ======
st.markdown("""
<style>
.stHorizontalBlock { justify-content: start !important; flex-wrap: nowrap; }
.stHorizontalBlock>div { min-width: fit-content; }

[data-testid="stSidebarUserContent"]{ margin-top: -3rem; }
[data-testid="stStatusWidget"], .stToolbarActions{ display: none; }
header.stAppHeader { background: none; }
.stMainBlockContainer.block-container { padding: 0.5rem 2rem; }
.stAppDeployButton { display: none !important; }

.blurred { filter: blur(5px) grayscale(12%); transition: filter .2s ease-in-out; pointer-events: none; }

.app-overlay{ position: fixed; inset: 0; background: rgba(0,0,0,.28); z-index: 10000;
              display:flex; align-items:center; justify-content:center; backdrop-filter: blur(2px); }
.app-overlay .card{ background: #111; color: #fff; padding: 14px 18px; border-radius: 12px;
                    box-shadow: 0 8px 30px rgba(0,0,0,.3); text-align: center; min-width: 280px; max-width: 80vw; font-size: 15px; }
.spinner { width: 46px; height: 46px; border: 4px solid rgba(255,255,255,0.35); border-top-color: #fff;
           border-radius: 50%; animation: spin 1s linear infinite; margin: 0 auto 10px auto; }
@keyframes spin { to { transform: rotate(360deg); } }

.st-key-eta_ui { display: none !important; }
</style>
""", unsafe_allow_html=True)

# ====== session_state ======
ss = st.session_state
def _init(k, v):
    if k not in ss: ss[k] = v

_init("is_running", False)
_init("busy_msg", "")
_init("step", None)               # 'optimize' -> 'train' -> 'forecast' -> None
_init("params", {})
_init("input_path", None)
_init("promo_path", None)
_init("hist_df", None)
_init("forecast_df", None)
_init("freq", None)

# UI state
_init("chart_mode", "SKU")        # "SKU" | "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
_init("sku_select", None)         # –≤—ã–±—Ä–∞–Ω–Ω—ã–π SKU
_init("cat_select", None)         # –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
_init("sk_select", "–í—Å–µ –°–ö")      # —Ñ–∏–ª—å—Ç—Ä –°–ö

# —Ç–µ—Ö. —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ –°–ö
_init("_sk_list", None)

# ====== Helpers ======
WORKDIR = Path("ui_runtime"); WORKDIR.mkdir(exist_ok=True, parents=True)
OUTDIR  = Path("outputs"); OUTDIR.mkdir(exist_ok=True, parents=True)

def _norm_sku_series(s: pd.Series) -> pd.Series:
    s = s.astype(str).str.strip().str.replace(r"\.0$", "", regex=True)
    s = s.where(~s.isin(["nan", "NaN", "None"]), other="NA")
    return s

def _norm_sku_col(df: pd.DataFrame, col: str = "sku") -> pd.DataFrame:
    if col not in df.columns:
        df[col] = "ALL"
        return df
    df[col] = _norm_sku_series(df[col])
    return df

def _san(s: str) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è –¥–ª—è —Ñ–∞–π–ª–æ–≤ (–ø–æ –°–ö)."""
    s = str(s)
    s = re.sub(r"[^0-9A-Za-z._-]+", "_", s)
    return s[:80] or "ALL"

def save_uploaded_file(uploaded, target_path: Path) -> Path:
    target_path.parent.mkdir(parents=True, exist_ok=True)
    with open(target_path, "wb") as f:
        f.write(uploaded.getbuffer())
    return target_path

def run_optimize(input_csv: str, algo: str, freq: str, horizon: int, cv: int, trials: int):
    optimize_main(input_csv, algo, freq, horizon, cv, trials, str(OUTDIR))

def run_train(input_csv: str, freq: str, horizon: int, cv: int, eta: float,
              lookback_months: Optional[int], halflife: Optional[int]):
    smart_train_main(input_csv, freq, horizon, cv, eta, str(OUTDIR), lookback_months, halflife)

def run_forecast(input_csv: str, model_path: str, freq: str, horizon: int,
                 joint: bool, calibrate_last_k: int, cal_clip_low: float, cal_clip_high: float,
                 promo_scenario: Optional[str]):
    forecast_main(input_csv, model_path, horizon, str(OUTDIR), promo_scenario, freq,
                  joint, calibrate_last_k, cal_clip_low, cal_clip_high)

def load_forecast_csv(freq: str) -> pd.DataFrame:
    p = OUTDIR / f"forecast_{freq}.csv"
    if not p.exists():
        raise FileNotFoundError(f"–ù–µ –Ω–∞–π–¥–µ–Ω {p}")
    df = pd.read_csv(p, dtype={"sku": str})
    df = _norm_sku_col(df, "sku")
    return df

# ====== Plotters ======
def plot_sku_interactive(history: pd.DataFrame,
                         forecast: pd.DataFrame,
                         sku: str,
                         show_band: bool = True,
                         show_points: bool = True,
                         show_promo: bool = True):
    h = _norm_sku_col(history.copy(), "sku")
    f = _norm_sku_col(forecast.copy(), "sku")
    sku = _norm_sku_series(pd.Series([sku])).iloc[0]

    h = h[h["sku"] == sku]
    f = f[f["sku"] == sku]
    if h.empty and f.empty:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ SKU.")
        return

    h["date"] = pd.to_datetime(h["date"], errors="coerce")
    f["date"] = pd.to_datetime(f["date"], errors="coerce")
    h.sort_values("date", inplace=True)
    f.sort_values("date", inplace=True)

    fig = go.Figure()
    fig.add_scatter(x=h["date"], y=h["qty"],
                    mode="lines+markers" if show_points else "lines",
                    name="–ò—Å—Ç–æ—Ä–∏—è (qty)",
                    hovertemplate="–î–∞—Ç–∞: %{x|%Y-%m-%d}<br>–ü—Ä–æ–¥–∞–∂–∏: %{y:,}<extra></extra>")
    if "p50" in f.columns and len(f):
        fig.add_scatter(x=f["date"], y=f["p50"], mode="lines",
                        name="–ü—Ä–æ–≥–Ω–æ–∑ p50", line=dict(dash="dash"),
                        hovertemplate="–î–∞—Ç–∞: %{x|%Y-%m-%d}<br>p50: %{y:,}<extra></extra>")
    if show_band and {"p10","p90"}.issubset(f.columns) and len(f):
        fig.add_scatter(x=f["date"], y=f["p90"], mode="lines", line=dict(width=0),
                        name="p90", hoverinfo="skip", showlegend=False)
        fig.add_scatter(x=f["date"], y=f["p10"], mode="lines", line=dict(width=0),
                        fill="tonexty", name="–î–∏–∞–ø–∞–∑–æ–Ω p10‚Äìp90",
                        hovertemplate="–î–∞—Ç–∞: %{x|%Y-%m-%d}<br>p10: %{y:,}<extra></extra>")
    if show_promo and "promo_flag" in h.columns and h["promo_flag"].sum() > 0:
        shapes = []
        for dt in h.loc[h["promo_flag"] == 1, "date"]:
            if ss.freq == "monthly":
                start = pd.to_datetime(dt).replace(day=1)
                end = (start + pd.offsets.MonthEnd(0)).normalize() + pd.Timedelta(days=1)
            else:
                start = pd.to_datetime(dt); end = start + pd.Timedelta(days=1)
            shapes.append(dict(type="rect", xref="x", yref="paper",
                               x0=start, x1=end, y0=0, y1=1,
                               fillcolor="rgba(255,165,0,0.15)", line=dict(width=0)))
        fig.update_layout(shapes=shapes)

    fig.update_layout(
        title=dict(text=f"SKU: {sku}", x=0.01, xanchor="left"),
        margin=dict(l=10, r=10, t=50, b=20),
        xaxis=dict(title="–î–∞—Ç–∞",
                   rangeslider=dict(visible=True),
                   rangeselector=dict(buttons=list([
                        dict(count=3, label="3M", step="month", stepmode="backward"),
                        dict(count=6, label="6M", step="month", stepmode="backward"),
                        dict(count=1, label="1Y", step="year", stepmode="backward"),
                        dict(step="all", label="All")
                   ]))),
        yaxis=dict(title="–ü—Ä–æ–¥–∞–∂–∏"),
        legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1)
    )
    st.plotly_chart(fig, use_container_width=True, config=dict(displaylogo=False,
                                                               toImageButtonOptions=dict(filename=f"forecast_{sku}")))

def plot_category_interactive(history: pd.DataFrame,
                              forecast: pd.DataFrame,
                              category: str,
                              freq: Optional[str] = None,
                              show_band: bool = True,
                              show_points: bool = True,
                              show_promo: bool = True):
    """–ì—Ä–∞—Ñ–∏–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: –∏—Å—Ç–æ—Ä–∏—è = —Å—É–º–º–∞ qty; –ø—Ä–æ–≥–Ω–æ–∑ = –∫–≤–∞–Ω—Ç–∏–ª—å —Å—É–º–º—ã (MC –ø–æ p10/p50/p90 –∫–∞–∂–¥–æ–≥–æ SKU)."""
    h = history.copy(); f = forecast.copy()
    h["category"] = h.get("category", "ALL").astype(str)
    f["category"] = f.get("category", "ALL").astype(str)
    cat = str(category)

    h = h[h["category"] == cat].copy()
    f = f[f["category"] == cat].copy()
    if h.empty and f.empty:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        return

    h["date"] = pd.to_datetime(h["date"], errors="coerce")
    f["date"] = pd.to_datetime(f["date"], errors="coerce")

    h_agg = h.groupby("date", as_index=False)["qty"].sum()

    # --- MC –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä –∫–≤–∞–Ω—Ç–∏–ª–µ–π —Å—É–º–º—ã –ø–æ SKU ---
    def _draw_from_three_quantiles(p10, p50, p90, size):
        u = np.random.rand(size)
        x = np.where(u <= 0.5, p10 + (p50 - p10) * (u / 0.5),
                             p50 + (p90 - p50) * ((u - 0.5) / 0.5))
        x = np.where(u < 0.1, p10, x)
        x = np.where(u > 0.9, p90, x)
        return x

    def _aggregate_group_quantiles_mc(fcat: pd.DataFrame, n_draws: int = 2000) -> pd.DataFrame:
        out = []
        for dt, g in fcat.groupby("date"):
            s = np.zeros(n_draws, dtype=float)
            for _, r in g.iterrows():
                p10 = float(r.get("p10", 0.0)) if "p10" in g.columns else 0.0
                p50 = float(r.get("p50", 0.0)) if "p50" in g.columns else 0.0
                p90 = float(r.get("p90", 0.0)) if "p90" in g.columns else 0.0
                # —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –æ—Ç NaN –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                p10 = max(p10, 0.0); p50 = max(p50, 0.0); p90 = max(p90, 0.0)
                # –ª–æ–∫–∞–ª—å–Ω–∞—è –º–æ–Ω–æ—Ç–æ–Ω–Ω–æ—Å—Ç—å
                arr = np.array([p10, p50, p90], dtype=float); arr.sort()
                d = _draw_from_three_quantiles(arr[0], arr[1], arr[2], n_draws)
                s += np.maximum(d, 0.0)
            out.append({
                "date": pd.to_datetime(dt),
                "p10": float(np.quantile(s, 0.10)),
                "p50": float(np.quantile(s, 0.50)),
                "p90": float(np.quantile(s, 0.90)),
            })
        res = pd.DataFrame(out).sort_values("date")
        # —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –º–æ–Ω–æ—Ç–æ–Ω–Ω–æ—Å—Ç—å
        if not res.empty:
            qq = np.vstack([res["p10"].values, res["p50"].values, res["p90"].values])
            qq.sort(axis=0)
            res["p10"], res["p50"], res["p90"] = qq[0], qq[1], qq[2]
        return res
    if {"p10","p50","p90"}.issubset(set(f.columns)) and len(f):
        f_agg = _aggregate_group_quantiles_mc(f)
    else:
        cols_to_sum = [c for c in ["p10", "p50", "p90"] if c in f.columns]
        f_agg = f.groupby("date", as_index=False)[cols_to_sum].sum() if cols_to_sum else f.copy()


    h_agg.sort_values("date", inplace=True)
    f_agg.sort_values("date", inplace=True)

    fig = go.Figure()
    fig.add_scatter(x=h_agg["date"], y=h_agg["qty"],
                    mode="lines+markers" if show_points else "lines",
                    name="–ò—Å—Ç–æ—Ä–∏—è (qty, —Å—É–º–º–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)",
                    hovertemplate="–î–∞—Ç–∞: %{x|%Y-%m-%d}<br>–ü—Ä–æ–¥–∞–∂–∏: %{y:,}<extra></extra>")
    if "p50" in f_agg.columns and len(f_agg):
        fig.add_scatter(x=f_agg["date"], y=f_agg["p50"], mode="lines",
                        name="–ü—Ä–æ–≥–Ω–æ–∑ p50 (—Å—É–º–º–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)",
                        line=dict(dash="dash"),
                        hovertemplate="–î–∞—Ç–∞: %{x|%Y-%m-%d}<br>p50: %{y:,}<extra></extra>")
    if show_band and {"p10","p90"}.issubset(f_agg.columns) and len(f_agg):
        fig.add_scatter(x=f_agg["date"], y=f_agg["p90"], mode="lines", line=dict(width=0),
                        name="p90", hoverinfo="skip", showlegend=False)
        fig.add_scatter(x=f_agg["date"], y=f_agg["p10"], mode="lines", line=dict(width=0),
                        fill="tonexty", name="–î–∏–∞–ø–∞–∑–æ–Ω p10‚Äìp90",
                        hovertemplate="–î–∞—Ç–∞: %{x|%Y-%m-%d}<br>p10: %{y:,}<extra></extra>")

    if show_promo and "promo_flag" in h.columns and h["promo_flag"].sum() > 0:
        shapes = []
        for dt in h.loc[h["promo_flag"] == 1, "date"].unique():
            if (freq or ss.get("freq")) == "monthly":
                start = pd.to_datetime(dt).replace(day=1)
                end = (start + pd.offsets.MonthEnd(0)).normalize() + pd.Timedelta(days=1)
            else:
                start = pd.to_datetime(dt); end = start + pd.Timedelta(days=1)
            shapes.append(dict(type="rect", xref="x", yref="paper",
                               x0=start, x1=end, y0=0, y1=1,
                               fillcolor="rgba(255,165,0,0.15)", line=dict(width=0)))
        fig.update_layout(shapes=shapes)

    fig.update_layout(
        title=dict(text=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat}", x=0.01, xanchor="left"),
        margin=dict(l=10, r=10, t=70, b=20),
        xaxis=dict(title="–î–∞—Ç–∞",
                   rangeslider=dict(visible=True),
                   rangeselector=dict(buttons=list([
                        dict(count=3, label="3M", step="month", stepmode="backward"),
                        dict(count=6, label="6M", step="month", stepmode="backward"),
                        dict(count=1, label="1Y", step="year", stepmode="backward"),
                        dict(step="all", label="All")
                   ]))),
        yaxis=dict(title="–ü—Ä–æ–¥–∞–∂–∏"),
        legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1)
    )
    st.plotly_chart(fig, use_container_width=True, config=dict(displaylogo=False))

# ====== Header ======
col1, col2 = st.columns([1, 12])
if Path(LOGO_BIG).exists():
    try:
        img_b64 = b64encode(Path(LOGO_BIG).read_bytes()).decode()
        with col1:
            st.markdown(
                f"<img src='data:image/png;base64,{img_b64}' "
                f"style='width:72px;height:auto;display:block;'/>",
                unsafe_allow_html=True
            )
    except Exception:
        with col1: st.markdown("<div style='font-size:48px'>üìà</div>", unsafe_allow_html=True)
else:
    with col1: st.markdown("<div style='font-size:48px'>üìà</div>", unsafe_allow_html=True)

with col2:
    st.markdown("<h1 style='margin:0;margin-left: -2rem;'>orecastPro</h1>", unsafe_allow_html=True)

# ====== Sidebar ======
st.sidebar.title("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã")

uploaded_csv = st.sidebar.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π CSV (monthly/daily)",
    type=["csv"],
    help=("CSV —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏: date (YYYY-MM-DD), sku, qty, promo_flag (0/1|–¥–æ–ª—è), category (–æ–ø—Ü.), SK (–æ–ø—Ü.).")
)

freq = st.sidebar.selectbox(
    "–ß–∞—Å—Ç–æ—Ç–∞", ["monthly", "daily"], index=0,
    help=("–ì—Ä–∞–Ω—É–ª—è—Ä–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≥–Ω–æ–∑–∞.")
)

model_algo = st.sidebar.selectbox(
    "–ú–æ–¥–µ–ª—å –¥–ª—è Optimize", ["lgbm", "catboost"], index=0,
    help=("–ö–∞–∫–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –Ω–∞ —ç—Ç–∞–ø–µ HPO.")
)

do_optimize = st.sidebar.checkbox(
    "–ó–∞–ø—É—Å—Ç–∏—Ç—å Optimize (HPO)", value=True,
    help=("–ü–µ—Ä–µ–±–æ—Ä –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (Optuna) —Å –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏.")
)

trials = st.sidebar.number_input(
    "HPO trials", min_value=10, max_value=500, value=60, step=10,
    help=("–°–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.")
)

st.sidebar.markdown("---")

horizon = st.sidebar.number_input(
    "Horizon", min_value=1, max_value=60, value=12,
    help=("–ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ –ø–µ—Ä–∏–æ–¥–∞—Ö.")
)

cv = st.sidebar.number_input(
    "CV folds", min_value=2, max_value=10, value=3,
    help=("–°–¥–≤–∏–≥–∞–µ–º –æ–∫–Ω–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º.")
)

st.sidebar.markdown('<span id="eta_anchor"></span>', unsafe_allow_html=True)
eta = st.sidebar.number_input(
    "Ensemble Œ∑ (–∂–µ—Å—Ç–∫–æ—Å—Ç—å —à—Ç—Ä–∞—Ñ–∞)",
    min_value=0.1, max_value=20.0, value=5.0, step=0.1,
    help=("–ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ä–∞—Å—á—ë—Ç–µ –≤–µ—Å–æ–≤; –æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."),
    key="eta_ui",
)

lookback_months_val = st.sidebar.number_input(
    "Lookback (–º–µ—Å, ~–¥–Ω–∏ –¥–ª—è daily)", min_value=0, max_value=240, value=60,
    help=("–°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –±—Ä–∞—Ç—å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (0 = –≤—Å—è –∏—Å—Ç–æ—Ä–∏—è).")
)

halflife_val = st.sidebar.number_input(
    "Halflife (–º–µ—Å/–¥–Ω–∏)", min_value=0, max_value=120, value=18,
    help=("–ü–µ—Ä–∏–æ–¥ –ø–æ–ª—É—Ä–∞—Å–ø–∞–¥–∞ –¥–ª—è –∑–∞—Ç—É—Ö–∞–Ω–∏—è –≤–µ—Å–æ–≤ –æ–±—É—á–∞—é—â–∏—Ö —Ç–æ—á–µ–∫ (0 = –≤—ã–∫–ª.).")
)

st.sidebar.markdown("---")

joint = st.sidebar.checkbox(
    "–°–æ–≤–º–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –≤—Å–µ–º SKU", value=True,
    help=("–û–±—É—á–∞–µ–º –æ–¥–Ω—É –º–æ–¥–µ–ª—å –Ω–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–∞—Ö (SKU/–∫–∞—Ç–µ–≥–æ—Ä–∏—è –∫–∞–∫ –ø—Ä–∏–∑–Ω–∞–∫–∏).")
)

calibrate_last_k = st.sidebar.number_input(
    "–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞: –ø–æ—Å–ª–µ–¥–Ω–∏–µ k —Ç–æ—á–µ–∫", min_value=0, max_value=24, value=6,
    help=("–ü–æ—Å—Ç-–∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è p50 –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º k —Ñ–∞–∫—Ç–∞–º.")
)

cal_clip_low = st.sidebar.number_input(
    "Calibrate clip low", min_value=0.1, max_value=2.0, value=0.6, step=0.05,
    help=("–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è p50 –ø—Ä–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–µ.")
)

cal_clip_high = st.sidebar.number_input(
    "Calibrate clip high", min_value=0.1, max_value=3.0, value=1.4, step=0.05,
    help=("–í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è p50 –ø—Ä–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–µ.")
)

promo_file = st.sidebar.file_uploader(
    "–ü–ª–∞–Ω –ø—Ä–æ–º–æ (–æ–ø—Ü.) CSV", type=["csv"],
    help=("–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: date, sku (–∏–ª–∏ ALL), promo_flag=1.")
)

st.sidebar.markdown("---")
run_btn = st.sidebar.button(
    "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Forecast",
    help="–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ: HPO (–µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω) ‚Üí –æ–±—É—á–µ–Ω–∏–µ –∞–Ω—Å–∞–º–±–ª—è ‚Üí –ø—Ä–æ–≥–Ω–æ–∑ (–ø–æ –∫–∞–∂–¥–æ–π –°–ö –æ—Ç–¥–µ–ª—å–Ω–æ)."
)

# ====== –û–≤–µ—Ä–ª–µ–π (–µ—Å–ª–∏ –∏–¥—ë—Ç —à–∞–≥) ======
if ss.is_running:
    st.markdown(f"""
    <div class="app-overlay">
      <div class="card">
        <div class="spinner"></div>
        <div>{ss.busy_msg}</div>
      </div>
    </div>
    """, unsafe_allow_html=True)

# ====== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ ======
if run_btn:
    try:
        # CSV
        if uploaded_csv is not None:
            input_path = save_uploaded_file(uploaded_csv, WORKDIR / "data.csv")
            ss.input_path = str(input_path)
        elif ss.input_path:
            input_path = Path(ss.input_path)
            if not input_path.exists():
                st.warning("–†–∞–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π CSV –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ."); st.stop()
        else:
            st.warning("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π CSV."); st.stop()

        # –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–æ–Ω–æ–∫ (+ SKU –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏)
        df_hist = pd.read_csv(ss.input_path, dtype={"sku": str})
        df_hist = _norm_sku_col(df_hist, "sku")
        if "qty" not in df_hist.columns: raise ValueError("–í CSV –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ–ª–æ–Ω–∫–∞ 'qty'.")
        if "date" not in df_hist.columns: raise ValueError("–í CSV –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ–ª–æ–Ω–∫–∞ 'date' (YYYY-MM-DD).")
        if "promo_flag" not in df_hist.columns: df_hist["promo_flag"] = 0
        if "category" not in df_hist.columns: df_hist["category"] = "ALL"
        if "SK" not in df_hist.columns: df_hist["SK"] = "ALL"
        # –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –≤—Ö–æ–¥
        df_hist.to_csv(ss.input_path, index=False)

        # –ø—Ä–æ–º–æ-–ø–ª–∞–Ω
        if promo_file is not None:
            ss.promo_path = str(save_uploaded_file(promo_file, WORKDIR / "promo.csv"))
        else:
            ss.promo_path = None

        # —Å–ø–∏—Å–æ–∫ –°–ö –¥–ª—è —Ä–∞–∑–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥–æ–Ω–∞
        sk_list = sorted(df_hist["SK"].astype(str).dropna().unique().tolist())
        ss._sk_list = sk_list

        # –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞
        ss.params = dict(
            freq=freq, model_algo=model_algo, do_optimize=bool(do_optimize),
            trials=int(trials), horizon=int(horizon), cv=int(cv), eta=float(eta),
            lookback=int(lookback_months_val) if lookback_months_val > 0 else None,
            halflife=int(halflife_val) if halflife_val > 0 else None,
            joint=bool(joint), calibrate_last_k=int(calibrate_last_k),
            cal_clip_low=float(cal_clip_low), cal_clip_high=float(cal_clip_high),
        )

        ss.is_running = True
        ss.step = "optimize" if ss.params["do_optimize"] else "train"
        ss.busy_msg = "–ó–∞–ø—É—Å–∫ HPO‚Ä¶" if ss.step == "optimize" else "–û–±—É—á–µ–Ω–∏–µ –∞–Ω—Å–∞–º–±–ª–µ–π –ø–æ –°–ö‚Ä¶"
        rerun()

    except Exception:
        err_box.error("–û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:\n\n" + "".join(traceback.format_exc()))

# ====== –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π ======
def _filter_csv_by_sk(src_csv: str, sk_value: str) -> str:
    """–°–¥–µ–ª–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π CSV —Ç–æ–ª—å–∫–æ –ø–æ –æ–¥–Ω–æ–π –°–ö."""
    df = pd.read_csv(src_csv, dtype={"sku": str})
    if "SK" not in df.columns:
        df["SK"] = "ALL"
    df = df[df["SK"].astype(str) == str(sk_value)]
    tmp = WORKDIR / f"data__sk={_san(sk_value)}.csv"
    df.to_csv(tmp, index=False)
    return str(tmp)

def _filter_promo_by_sk(promo_csv: Optional[str], sk_hist: pd.DataFrame) -> Optional[str]:
    """–ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–º–æ-—Ñ–∞–π–ª –∏ –≤ –Ω—ë–º –µ—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∞ SK ‚Äî —Ñ–∏–ª—å—Ç—Ä—É–µ–º; –∏–Ω–∞—á–µ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å.
       –¢–∞–∫–∂–µ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è sku, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —É —ç—Ç–æ–π –°–ö –≤ –∏—Å—Ç–æ—Ä–∏–∏."""
    if promo_csv is None:
        return None
    try:
        dfp = pd.read_csv(promo_csv)
    except Exception:
        return promo_csv
    dfp = dfp.copy()
    # –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ sku –¥–∞–Ω–Ω–æ–π –°–ö (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã)
    if "sku" in dfp.columns:
        sku_allowed = set(sk_hist["sku"].astype(str).unique().tolist())
        dfp["sku"] = dfp["sku"].astype(str)
        dfp = dfp[dfp["sku"].isin(sku_allowed) | (dfp["sku"] == "ALL")]
    # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–ª–æ–Ω–∫–∏ SK –≤ –ø—Ä–æ–º–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if "SK" in dfp.columns:
        sk_value = sk_hist["SK"].astype(str).iloc[0] if len(sk_hist) else "ALL"
        dfp = dfp[(dfp["SK"].astype(str) == sk_value) | (dfp["SK"].isna())]
        dfp = dfp.drop(columns=["SK"])
    out = WORKDIR / f"promo__{_san(sk_hist['SK'].iloc[0] if len(sk_hist) else 'ALL')}.csv"
    dfp.to_csv(out, index=False)
    return str(out)

try:
    if ss.is_running and ss.step:
        p = ss.params
        sk_list: List[str] = ss._sk_list or ["ALL"]

        # === OPTIMIZE (per SK) ===
        if ss.step == "optimize":
            for sk in sk_list:
                ss.busy_msg = f"HPO –¥–ª—è –°–ö = {sk}‚Ä¶"
                sk_csv = _filter_csv_by_sk(ss.input_path, sk)
                run_optimize(sk_csv, p["model_algo"], p["freq"], p["horizon"], p["cv"], p["trials"])
                # –µ—Å–ª–∏ –æ–ø—Ç–∏–º–∞–π–∑–µ—Ä –ø–∏—à–µ—Ç –≤ OUTDIR –æ–±—â–∏–º–∏ –∏–º–µ–Ω–∞–º–∏ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º —Ç—É—Ç
            ss.step = "train"; ss.busy_msg = "–û–±—É—á–µ–Ω–∏–µ –∞–Ω—Å–∞–º–±–ª–µ–π –ø–æ –°–ö‚Ä¶"; rerun()

        # === TRAIN (per SK) ===
        elif ss.step == "train":
            for sk in sk_list:
                ss.busy_msg = f"–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –°–ö = {sk}‚Ä¶"
                sk_csv = _filter_csv_by_sk(ss.input_path, sk)
                run_train(sk_csv, p["freq"], p["horizon"], p["cv"], p["eta"], p["lookback"], p["halflife"])

                # –ø–µ—Ä–µ–∏–º–µ–Ω—É–µ–º –º–æ–¥–µ–ª—å, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∑–∞—Ç–∏—Ä–∞–ª–∞—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –°–ö
                model_def = OUTDIR / f"model_ensemble_{p['freq']}.joblib"
                if model_def.exists():
                    (OUTDIR / "models_by_sk").mkdir(exist_ok=True, parents=True)
                    model_sk = OUTDIR / "models_by_sk" / f"model_ensemble_{p['freq']}__sk={_san(sk)}.joblib"
                    try:
                        shutil.move(str(model_def), str(model_sk))
                    except Exception:
                        shutil.copy2(str(model_def), str(model_sk))
                # –º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã HPO, –µ—Å–ª–∏ –æ–Ω–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏

            ss.step = "forecast"; ss.busy_msg = "–†–∞—Å—á—ë—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ –°–ö‚Ä¶"; rerun()

        # === FORECAST (per SK) ===
        elif ss.step == "forecast":
            combined: List[pd.DataFrame] = []
            for sk in sk_list:
                ss.busy_msg = f"–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –°–ö = {sk}‚Ä¶"
                sk_csv = _filter_csv_by_sk(ss.input_path, sk)

                # –º–æ–¥–µ–ª—å –¥–ª—è –°–ö
                model_sk = OUTDIR / "models_by_sk" / f"model_ensemble_{p['freq']}__sk={_san(sk)}.joblib"
                if not model_sk.exists():
                    # fallback: –≤–¥—Ä—É–≥ –æ–±—É—á–∞–ª–∏ –≤ –æ–±—â–∏–π —Ñ–∞–π–ª (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
                    model_sk = OUTDIR / f"model_ensemble_{p['freq']}.joblib"

                # –ø—Ä–æ–º–æ –¥–ª—è –°–ö (–µ—Å–ª–∏ –µ—Å—Ç—å)
                df_sk_hist = pd.read_csv(sk_csv)
                promo_sk_path = _filter_promo_by_sk(ss.promo_path, df_sk_hist)

                run_forecast(sk_csv, str(model_sk), p["freq"], p["horizon"],
                             p["joint"], p["calibrate_last_k"], p["cal_clip_low"], p["cal_clip_high"],
                             promo_sk_path)

                # –±–µ—Ä–µ–º –ø—Ä–æ–≥–Ω–æ–∑, –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É SK, –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                fpath = OUTDIR / f"forecast_{p['freq']}.csv"
                if not fpath.exists():
                    raise FileNotFoundError(f"–û–∂–∏–¥–∞–ª—Å—è {fpath} –ø–æ—Å–ª–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –°–ö={sk}")
                dff = pd.read_csv(fpath, dtype={"sku": str})
                dff["SK"] = str(sk)
                # —Å–æ—Ö—Ä–∞–Ω–∏–º per-SK –ø—Ä–æ–≥–Ω–æ–∑ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                per_sk_out = OUTDIR / "forecast_by_sk"
                per_sk_out.mkdir(exist_ok=True, parents=True)
                dff.to_csv(per_sk_out / f"forecast_{p['freq']}__sk={_san(sk)}.csv", index=False)
                combined.append(dff)

            # –æ–±—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –≤—Å–µ–º –°–ö
            df_all = pd.concat(combined, ignore_index=True) if combined else pd.DataFrame()
            # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º sku —Å—Ç—Ä–æ–∫–æ–π + –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é
            df_all = _norm_sku_col(df_all, "sku")

            # –¥–æ–±–∞–≤–ª—è–µ–º category –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ (sku->category –ø—Ä–∏–≤—è–∑–∫–∞ –ø–æ –∫–∞–∂–¥–æ–π –°–ö)
            hist_full = pd.read_csv(ss.input_path, dtype={"sku": str})
            hist_full = _norm_sku_col(hist_full, "sku")
            if "category" not in hist_full.columns:
                hist_full["category"] = "ALL"
            if "SK" not in hist_full.columns:
                hist_full["SK"] = "ALL"
            sku_cat_map = (hist_full[["sku", "category", "SK"]]
                           .drop_duplicates()
                           .astype({"sku": str, "category": str, "SK": str}))
            df_all = df_all.merge(sku_cat_map, on=["sku", "SK"], how="left")
            df_all["category"] = df_all["category"].fillna("ALL")

            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ–±—â–∏–π —Ñ–∞–π–ª (–≤ —Å—Ç–∞—Ä–æ–µ –∏–º—è)
            df_all.to_csv(OUTDIR / f"forecast_{p['freq']}.csv", index=False)

            # –æ–±–Ω–æ–≤–ª—è–µ–º state –¥–ª—è UI
            ss.forecast_df = df_all.copy()
            ss.hist_df = hist_full.copy()
            ss.freq = p["freq"]

            # –¥–µ—Ñ–æ–ª—Ç—ã —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
            if ss.hist_df is not None:
                sks = ["–í—Å–µ –°–ö"] + sorted(ss.hist_df["SK"].astype(str).dropna().unique().tolist())
                if ss.sk_select not in sks:
                    ss.sk_select = "–í—Å–µ –°–ö"
                cats = sorted(ss.hist_df.get("category", pd.Series(["ALL"])).astype(str).unique().tolist())
                if not cats:
                    ss.cat_select = None
                elif ss.cat_select not in cats:
                    ss.cat_select = cats[0]
                skus = sorted(ss.hist_df["sku"].astype(str).dropna().unique().tolist())
                if not skus:
                    ss.sku_select = None
                elif ss.sku_select not in skus:
                    ss.sku_select = skus[0]

            ss.is_running = False; ss.busy_msg = ""; ss.step = None
            rerun()
except Exception:
    ss.is_running = False; ss.busy_msg = ""; ss.step = None
    err_box.error("–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞:\n\n" + "".join(traceback.format_exc()))

# ====== –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ======
st.markdown(f'<div class="{ "blurred" if ss.is_running else "" }">', unsafe_allow_html=True)

if ss.forecast_df is not None and ss.hist_df is not None:
    df_h = ss.hist_df.copy()
    df_f = ss.forecast_df.copy()

    # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    if "category" not in df_h.columns: df_h["category"] = "ALL"
    if "SK" not in df_h.columns: df_h["SK"] = "ALL"
    df_h["category"] = df_h["category"].astype(str)
    df_h["SK"] = df_h["SK"].astype(str)
    df_h["sku"] = _norm_sku_series(df_h["sku"].astype(str))

    # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ
    df_f["sku"] = _norm_sku_series(df_f["sku"].astype(str))
    if "SK" not in df_f.columns:
        # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –Ω–æ —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å SK –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ
        df_f = df_f.merge(df_h[["sku","SK"]].drop_duplicates(), on="sku", how="left")

    # ===== –§–∏–ª—å—Ç—Ä –ø–æ –°–ö (–ø–µ—Ä–µ–¥ —Ç–∞–±–ª–∏—Ü–µ–π) =====
    sk_options = ["–í—Å–µ –°–ö"] + sorted(df_h["SK"].dropna().unique().tolist())
    default_sk = ss.sk_select if ss.sk_select in sk_options else "–í—Å–µ –°–ö"
    selected_sk = st.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ –°–ö", options=sk_options, index=sk_options.index(default_sk), key="sk_select")

    # –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫ –¥–∞–Ω–Ω—ã–º
    if selected_sk != "–í—Å–µ –°–ö":
        df_h = df_h[df_h["SK"] == selected_sk].copy()
        df_f = df_f[df_f["SK"] == selected_sk].copy()

    # –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞ ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º category –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø–æ—Ç–µ—Ä—è–ª–∞—Å—å)
    if "category" not in df_f.columns or df_f["category"].isna().any():
        sku_cat_map = df_h[["sku","category"]].drop_duplicates()
        df_f = df_f.drop(columns=[c for c in ["category"] if c in df_f.columns], errors="ignore")
        df_f = df_f.merge(sku_cat_map, on="sku", how="left")
        df_f["category"] = df_f["category"].fillna("ALL")

    # ===== –¢–∞–±–ª–∏—Ü–∞ =====
    st.subheader("üìÑ –ü—Ä–æ–≥–Ω–æ–∑ (–ø–µ—Ä–≤—ã–µ 200 —Å—Ç—Ä–æ–∫)")
    cols_order = [c for c in ["date","sku","category","SK","promo_flag","p10","p50","p90"] if c in df_f.columns]
    st.dataframe(df_f[cols_order].head(200))

    # ===== –í—ã–≥—Ä—É–∑–∫–∞ (–≤—Å–µ–≥–¥–∞ –ø–æ–ª–Ω—ã–π –ø–æ –≤—Å–µ–º –°–ö) =====
    full_csv_bytes = ss.forecast_df.to_csv(index=False).encode("utf-8")
    st.download_button(
        "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π forecast CSV (–≤—Å–µ –°–ö)",
        data=full_csv_bytes,
        file_name=f"forecast_{ss.freq or 'monthly'}.csv",
        mime="text/csv",
        key="download_forecast_btn"
    )

    st.markdown("---")

    # ===== –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–∞ –≥—Ä–∞—Ñ–∏–∫–∞ =====
    ss.chart_mode = st.radio("–ì—Ä–∞—Ñ–∏–∫ –ø–æ:", ["SKU", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"],
                             horizontal=True, index=0 if ss.chart_mode=="SKU" else 1,
                             key="chart_mode_radio")

    if ss.chart_mode == "–ö–∞—Ç–µ–≥–æ—Ä–∏—è":
        cats = sorted(df_h["category"].dropna().unique().tolist())
        if not cats:
            st.info("–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö.")
        else:
            if ss.cat_select not in cats:
                ss.cat_select = cats[0]
            st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞", options=cats, key="cat_select")
            c1, c2, c3 = st.columns(3)
            with c1: show_band = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å p10‚Äìp90", value=True, key="band_cat")
            with c2: show_points = st.checkbox("–¢–æ—á–∫–∏ –Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏", value=True, key="pts_cat")
            with c3: show_promo  = st.checkbox("–ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø—Ä–æ–º–æ", value=("promo_flag" in df_h.columns), key="promo_cat")

            if ss.cat_select is not None:
                plot_category_interactive(df_h, df_f, ss.cat_select,
                                          freq=ss.freq, show_band=show_band,
                                          show_points=show_points, show_promo=show_promo)
    else:
        # —Ä–µ–∂–∏–º SKU ‚Äî —Å–ø–∏—Å–æ–∫ SKU –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞ –°–ö
        skus = sorted(df_h["sku"].dropna().unique().tolist())
        if not skus:
            st.info("–ù–µ—Ç SKU –≤ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∏–ª—å—Ç—Ä –°–ö).")
        else:
            if ss.sku_select not in skus:
                ss.sku_select = skus[0]
            st.selectbox("SKU –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞", options=skus, key="sku_select")
            c1, c2, c3 = st.columns(3)
            with c1: show_band = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å p10‚Äì–ø90", value=True, key="band_sku")
            with c2: show_points = st.checkbox("–¢–æ—á–∫–∏ –Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏", value=True, key="pts_sku")
            with c3: show_promo  = st.checkbox("–ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø—Ä–æ–º–æ", value=("promo_flag" in df_h.columns), key="promo_sku")

            if ss.sku_select is not None:
                plot_sku_interactive(df_h, df_f, ss.sku_select,
                                     show_band=show_band,
                                     show_points=show_points,
                                     show_promo=show_promo)

st.markdown('</div>', unsafe_allow_html=True)
