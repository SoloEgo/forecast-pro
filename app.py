# app.py
import io
import os
from pathlib import Path
import traceback
from typing import Optional
import pandas as pd
import numpy as np
import streamlit as st
import matplotlib.pyplot as plt
from PIL import Image
# ====== –Ω–∞—à–∏ –º–æ–¥—É–ª–∏ ======
from src.pro.optimize import main as optimize_main
from src.pro.smart_train import main as smart_train_main
from src.pro.forecast import main as forecast_main
import plotly.graph_objects as go
from plotly.subplots import make_subplots

try:
    _rerun = st.rerun            # –Ω–æ–≤—ã–µ –≤–µ—Ä—Å–∏–∏ (>=1.30)
except AttributeError:
    _rerun = st.experimental_rerun  # —Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏

def rerun():
    _rerun()
err_box = st.empty()


# ====== –ª–æ–≥–æ—Ç–∏–ø—ã ======
LOGO_BIG = "assets/logo_forecastpro_transparent.png"
LOGO_ICO = "assets/logo_forecastpro_128.png"

# ====== set_page_config (–æ–¥–∏–Ω —Ä–∞–∑) ======
page_icon = "üìà"
try:
    if Path(LOGO_ICO).exists():
        page_icon = Image.open(LOGO_ICO)
except Exception:
    pass
st.set_page_config(page_title="ForecastPro", page_icon=page_icon, layout="wide")

# ====== CSS: –±–ª—é—Ä + –æ–≤–µ—Ä–ª–µ–π ======
st.markdown("""
<style>
[data-testid="stSidebarUserContent"]{
margin-top: -3rem;
}
[data-testid="stStatusWidget"], .stToolbarActions{
    display: none;
}
header.stAppHeader {
    background: none;
}
.stMainBlockContainer.block-container {
    padding: 0.5rem 2rem;
}
.stAppDeployButton { display: none !important; }
.blurred {
  filter: blur(5px) grayscale(12%);
  transition: filter .2s ease-in-out;
  pointer-events: none;
}
.app-overlay{
  position: fixed; inset: 0;
  background: rgba(0,0,0,.28);
  z-index: 10000;
  display:flex; align-items:center; justify-content:center;
  backdrop-filter: blur(2px);
}
.app-overlay .card{
  background: #111; color: #fff;
  padding: 14px 18px; border-radius: 12px;
  box-shadow: 0 8px 30px rgba(0,0,0,.3);
  text-align: center; min-width: 280px; max-width: 80vw;
  font-size: 15px;
}
.spinner {
  width: 46px; height: 46px;
  border: 4px solid rgba(255,255,255,0.35);
  border-top-color: #fff;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin: 0 auto 10px auto;
}

.st-key-eta_ui { display: none !important; }

@keyframes spin { to { transform: rotate(360deg); } }


</style>
""", unsafe_allow_html=True)

# ====== session_state ======
ss = st.session_state
def _init(k, v):
    if k not in ss: ss[k] = v

_init("is_running", False)
_init("busy_msg", "")
_init("step", None)               # 'optimize' -> 'train' -> 'forecast' -> None
_init("params", {})               # —Å—é–¥–∞ –∫–ª–∞–¥—ë–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞
_init("input_path", None)
_init("promo_path", None)
_init("hist_df", None)
_init("forecast_df", None)
_init("freq", None)
_init("sku_sel", None)

# ====== Header ======
col1, col2 = st.columns([1, 12])
with col1:
    if Path(LOGO_BIG).exists():
        st.image(LOGO_BIG)
    else:
        st.markdown("<div style='font-size:48px'>üìà</div>", unsafe_allow_html=True)
with col2:
    st.markdown("<h1 style='margin:0;margin-left: -2rem;'>orecastPro</h1>", unsafe_allow_html=True)

# ====== –†–∞–±–æ—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ======
WORKDIR = Path("ui_runtime"); WORKDIR.mkdir(exist_ok=True, parents=True)
OUTDIR = "outputs"

# ====== helpers ======
def save_uploaded_file(uploaded, target_path: Path):
    target_path.parent.mkdir(parents=True, exist_ok=True)
    with open(target_path, "wb") as f:
        f.write(uploaded.getbuffer())
    return target_path

def run_optimize(input_csv: str, algo: str, freq: str, horizon: int, cv: int, trials: int):
    optimize_main(input_csv, algo, freq, horizon, cv, trials, OUTDIR)

def run_train(input_csv: str, freq: str, horizon: int, cv: int, eta: float,
              lookback_months: Optional[int], halflife: Optional[int]):
    smart_train_main(input_csv, freq, horizon, cv, eta, OUTDIR, lookback_months, halflife)

def run_forecast(input_csv: str, model_path: str, freq: str, horizon: int,
                 joint: bool, calibrate_last_k: int, cal_clip_low: float, cal_clip_high: float,
                 promo_scenario: Optional[str]):
    forecast_main(input_csv, model_path, horizon, OUTDIR, promo_scenario, freq,
                  joint, calibrate_last_k, cal_clip_low, cal_clip_high)

def load_forecast_csv(freq: str) -> pd.DataFrame:
    f = Path(OUTDIR) / f"forecast_{freq}.csv"
    if not f.exists():
        raise FileNotFoundError(f"–ù–µ –Ω–∞–π–¥–µ–Ω {f}")
    return pd.read_csv(f)

def plot_sku_interactive(history: pd.DataFrame,
                         forecast: pd.DataFrame,
                         sku: str,
                         show_band: bool = True,
                         show_points: bool = True,
                         show_promo: bool = True):
    # —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –¥–∞—Ç—ã
    h = history[history["sku"] == sku].copy()
    f = forecast[forecast["sku"] == sku].copy()
    if h.empty and f.empty:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ SKU.")
        return
    h["date"] = pd.to_datetime(h["date"], errors="coerce")
    f["date"] = pd.to_datetime(f["date"], errors="coerce")
    h.sort_values("date", inplace=True)
    f.sort_values("date", inplace=True)

    fig = go.Figure()

    # –ò—Å—Ç–æ—Ä–∏—è
    fig.add_trace(go.Scatter(
        x=h["date"], y=h["qty"],
        mode="lines+markers" if show_points else "lines",
        name="–ò—Å—Ç–æ—Ä–∏—è (qty)",
        hovertemplate="–î–∞—Ç–∞: %{x|%Y-%m-%d}<br>–ü—Ä–æ–¥–∞–∂–∏: %{y:,}<extra></extra>"
    ))

    # –ü—Ä–æ–≥–Ω–æ–∑ p50
    if "p50" in f.columns and len(f):
        fig.add_trace(go.Scatter(
            x=f["date"], y=f["p50"],
            mode="lines",
            name="–ü—Ä–æ–≥–Ω–æ–∑ p50",
            line=dict(dash="dash"),
            hovertemplate="–î–∞—Ç–∞: %{x|%Y-%m-%d}<br>p50: %{y:,}<extra></extra>"
        ))

    # –î–∏–∞–ø–∞–∑–æ–Ω p10‚Äìp90 –∫–∞–∫ –∑–∞–ª–∏–≤–∫–∞
    if show_band and {"p10", "p90"}.issubset(f.columns) and len(f):
        # –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
        fig.add_trace(go.Scatter(
            x=f["date"], y=f["p90"],
            mode="lines",
            line=dict(width=0),
            name="p90",
            hoverinfo="skip",
            showlegend=False
        ))
        # –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ —Å fill='tonexty'
        fig.add_trace(go.Scatter(
            x=f["date"], y=f["p10"],
            mode="lines",
            line=dict(width=0),
            fill="tonexty",
            name="–î–∏–∞–ø–∞–∑–æ–Ω p10‚Äìp90",
            hovertemplate="–î–∞—Ç–∞: %{x|%Y-%m-%d}<br>p10: %{y:,}<extra></extra>"
        ))

    # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø—Ä–æ–º–æ (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∞)
    if show_promo and "promo_flag" in h.columns and h["promo_flag"].sum() > 0:
        # –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –ø–æ–¥—Å–≤–µ—Ç–∏–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞–º–∏
        shapes = []
        for dt in h.loc[h["promo_flag"] == 1, "date"]:
            # –Ω–∞ –º–µ—Å—è—á–Ω–æ–π —á–∞—Å—Ç–æ—Ç–µ –ø–æ–¥—Å–≤–µ—Ç–∏–º –≤–µ—Å—å –º–µ—Å—è—Ü,
            # –Ω–∞ –¥–Ω–µ–≤–Ω–æ–π ‚Äì –æ–¥–∏–Ω –¥–µ–Ω—å
            if ss.freq == "monthly":
                start = pd.to_datetime(dt).replace(day=1)
                # –∫–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞:
                end = (start + pd.offsets.MonthEnd(0)).normalize() + pd.Timedelta(days=1)
            else:  # daily
                start = pd.to_datetime(dt)
                end = start + pd.Timedelta(days=1)
            shapes.append(dict(
                type="rect", xref="x", yref="paper",
                x0=start, x1=end, y0=0, y1=1,
                fillcolor="rgba(255,165,0,0.15)", line=dict(width=0)
            ))
        fig.update_layout(shapes=shapes)

    # –û—Å–∏, –ª–µ–≥–µ–Ω–¥–∞, —Å–ª–∞–π–¥–µ—Ä, –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    fig.update_layout(
        margin=dict(l=10, r=10, t=40, b=10),
        title=f"SKU: {sku}",
        xaxis=dict(
            title="–î–∞—Ç–∞",
            rangeslider=dict(visible=True),
            rangeselector=dict(
                buttons=list([
                    dict(count=3, label="3M", step="month", stepmode="backward"),
                    dict(count=6, label="6M", step="month", stepmode="backward"),
                    dict(count=1, label="1Y", step="year", stepmode="backward"),
                    dict(step="all", label="All")
                ])
            )
        ),
        yaxis=dict(title="–ü—Ä–æ–¥–∞–∂–∏"),
        legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1)
    )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—É–ª–±–∞—Ä–∞: –±–µ–∑ –ª–æ–≥–æ—Ç–∏–ø–∞, —Å "—Å–∫–∞—á–∞—Ç—å PNG"
    config = dict(displaylogo=False, toImageButtonOptions=dict(filename=f"forecast_{sku}"))

    st.plotly_chart(fig, use_container_width=True, config=config)


# ====== Sidebar ======
# ------------- Sidebar -------------
st.sidebar.title("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
#st.sidebar.header("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã")

uploaded_csv = st.sidebar.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π CSV (monthly/daily)",
    type=["csv"],
    help=(
        "CSV —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏: date (YYYY-MM-DD), sku, qty, promo_flag (0/1), "
        "category (–æ–ø—Ü.). –ß–∞—Å—Ç–æ—Ç–∞ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –Ω–∏–∂–µ."
    ),
)

freq = st.sidebar.selectbox(
    "–ß–∞—Å—Ç–æ—Ç–∞",
    ["monthly", "daily"],
    index=0,
    help=(
        "–ì—Ä–∞–Ω—É–ª—è—Ä–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≥–Ω–æ–∑–∞:\n"
        "‚Ä¢ monthly ‚Äî —à–∞–≥ 1 –º–µ—Å—è—Ü (–æ–∂–∏–¥–∞–µ—Ç—Å—è –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å –Ω–∞ SKU/–º–µ—Å—è—Ü)\n"
        "‚Ä¢ daily ‚Äî —à–∞–≥ 1 –¥–µ–Ω—å (–æ–∂–∏–¥–∞–µ—Ç—Å—è –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å –Ω–∞ SKU/–¥–µ–Ω—å)"
    ),
)

model_algo = st.sidebar.selectbox(
    "–ú–æ–¥–µ–ª—å –¥–ª—è Optimize",
    ["lgbm", "catboost"],
    index=0,
    help=(
        "–ö–∞–∫–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –Ω–∞ —ç—Ç–∞–ø–µ HPO (–ø–æ–¥–±–æ—Ä–∞ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤).\n"
        "–ê–Ω—Å–∞–º–±–ª—å –æ–±—É—á–∏—Ç—Å—è –ø–æ—Å–ª–µ HPO; —ç—Ç–æ—Ç –≤—ã–±–æ—Ä –≤–ª–∏—è–µ—Ç –∏–º–µ–Ω–Ω–æ –Ω–∞ —Ç–æ, "
        "–∫–∞–∫—É—é –º–æ–¥–µ–ª—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º (LightGBM –∏–ª–∏ CatBoost)."
    ),
)

do_optimize = st.sidebar.checkbox(
    "–ó–∞–ø—É—Å—Ç–∏—Ç—å Optimize (HPO)",
    value=True,
    help=(
        "–í–∫–ª—é—á–∏—Ç—å —ç—Ç–∞–ø Hyper-Parameter Optimization (Optuna): –ø–µ—Ä–µ–±–æ—Ä –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ "
        "—Å –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏.\n"
        "–î–∞—ë—Ç —à–∞–Ω—Å –∑–∞–º–µ—Ç–Ω–æ —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ, –Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è —Ä–∞—Å—á—ë—Ç–∞."
    ),
)

trials = st.sidebar.number_input(
    "HPO trials",
    min_value=10, max_value=500, value=60, step=10,
    help=(
        "–°–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ (—Ç—Ä–µ–π–∞–ª–æ–≤) –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏ –ø–æ–¥–±–æ—Ä–µ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.\n"
        "–ë–æ–ª—å—à–µ ‚Äî –¥–æ–ª—å—à–µ, –Ω–æ –≤—ã—à–µ —à–∞–Ω—Å –Ω–∞–π—Ç–∏ –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ.\n"
        "–û—Ä–∏–µ–Ω—Ç–∏—Ä—ã: 30‚Äì80 –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö; 100‚Äì200 –¥–ª—è —Å–µ—Ä—å—ë–∑–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞."
    ),
)

st.sidebar.markdown("---")

horizon = st.sidebar.number_input(
    "Horizon",
    min_value=1, max_value=60, value=12,
    help=(
        "–ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ –ø–µ—Ä–∏–æ–¥–∞—Ö (–º–µ—Å—è—Ü–∞—Ö/–¥–Ω—è—Ö ‚Äî –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —á–∞—Å—Ç–æ—Ç–µ).\n"
        "–ß–µ–º –¥–ª–∏–Ω–Ω–µ–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç, —Ç–µ–º –≤—ã—à–µ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç—å –∏ –Ω–∏–∂–µ —Ç–æ—á–Ω–æ—Å—Ç—å."
    ),
)

cv = st.sidebar.number_input(
    "CV folds",
    min_value=2, max_value=10, value=3,
    help=(
        "–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª—å, —Å–¥–≤–∏–≥–∞—è –æ–∫–Ω–æ –≤–ø–µ—Ä—ë–¥ –ø–æ –≤—Ä–µ–º–µ–Ω–∏.\n"
        "–ù–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ —É—á–∏–º—Å—è –Ω–∞ –ø—Ä–æ—à–ª–æ–º –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º —Ä–æ–≤–Ω–æ –Ω–∞ Horizon –ø–µ—Ä–∏–æ–¥–æ–≤.\n"
        "–ë–æ–ª—å—à–µ —Ñ–æ–ª–¥–æ–≤ ‚Äî –Ω–∞–¥—ë–∂–Ω–µ–µ –æ—Ü–µ–Ω–∫–∞, –Ω–æ –¥–æ–ª—å—à–µ —Ä–∞—Å—á—ë—Ç.\n"
        "–ù—É–∂–Ω–æ ‚âà (CV folds + 1) √ó Horizon –ø–µ—Ä–∏–æ–¥–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏."
    ),
)

st.sidebar.markdown('<span id="eta_anchor"></span>', unsafe_allow_html=True)
eta = st.sidebar.number_input(
    "Ensemble Œ∑ (–∂–µ—Å—Ç–∫–æ—Å—Ç—å —à—Ç—Ä–∞—Ñ–∞)",
    min_value=0.1, max_value=20.0, value=5.0, step=0.1,
    help=(
        "–ü–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –∞–Ω—Å–∞–º–±–ª—è: —á–µ–º –±–æ–ª—å—à–µ Œ∑, —Ç–µ–º —Å–∏–ª—å–Ω–µ–µ "
        "—à—Ç—Ä–∞—Ñ—É—é—Ç—Å—è –º–æ–¥–µ–ª–∏, —Ö—É–∂–µ —Ä–∞–±–æ—Ç–∞–≤—à–∏–µ –Ω–∞ –Ω–µ–¥–∞–≤–Ω–∏—Ö –ø–µ—Ä–∏–æ–¥–∞—Ö.\n"
        "‚ö†Ô∏è –í —Ç–µ–∫—É—â–µ–π —Å–±–æ—Ä–∫–µ –∞–Ω—Å–∞–º–±–ª—å —É—Å—Ä–µ–¥–Ω—è–µ—Ç —Ä–∞–≤–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏, –ø–æ—ç—Ç–æ–º—É Œ∑ –Ω–µ –≤–ª–∏—è–µ—Ç. "
        "–û—Å—Ç–∞–≤—å—Ç–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é; –±—É–¥–µ—Ç –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω –≤ –≤–µ—Ä—Å–∏–∏ —Å–æ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ–º."
    ),
    key="eta_ui",
)

lookback_months_val = st.sidebar.number_input(
    "Lookback (–º–µ—Å, ~–¥–Ω–∏ –¥–ª—è daily)",
    min_value=0, max_value=240, value=60,
    help=(
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –ø–µ—Ä–∏–æ–¥–æ–≤ (–º–µ—Å—è—Ü–µ–≤/–¥–Ω–µ–π). "
        "0 ‚Äî –±—Ä–∞—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é.\n"
        "–ü–æ–ª–µ–∑–Ω–æ, –µ—Å–ª–∏ —Å—Ç–∞—Ä—ã–µ –≥–æ–¥—ã —É–∂–µ –Ω–µ —Ä–µ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ç–∏–≤–Ω—ã: —É–º–µ–Ω—å—à–∞–µ—Ç –≤–ª–∏—è–Ω–∏–µ –¥–∞–≤–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö."
    ),
)

halflife_val = st.sidebar.number_input(
    "Halflife (–º–µ—Å/–¥–Ω–∏)",
    min_value=0, max_value=120, value=18,
    help=(
        "–ü–µ—Ä–∏–æ–¥ –ø–æ–ª—É—Ä–∞—Å–ø–∞–¥–∞ –¥–ª—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∑–∞—Ç—É—Ö–∞–Ω–∏—è –≤–µ—Å–æ–≤ –æ–±—É—á–∞—é—â–∏—Ö —Ç–æ—á–µ–∫. "
        "–ö–∞–∂–¥—ã–µ Halflife –ø–µ—Ä–∏–æ–¥–æ–≤ –≤–∫–ª–∞–¥ —Å–Ω–∏–∂–∞–µ—Ç—Å—è –≤ 2 —Ä–∞–∑–∞.\n"
        "0 ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å. –¢–∏–ø–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 12‚Äì24 –º–µ—Å (monthly) –∏–ª–∏ 30‚Äì90 –¥–Ω–µ–π (daily)."
    ),
)

st.sidebar.markdown("---")

joint = st.sidebar.checkbox(
    "–°–æ–≤–º–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –≤—Å–µ–º SKU",
    value=True,
    help=(
        "–û–¥–Ω–∞ –º–æ–¥–µ–ª—å –æ–±—É—á–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É –Ω–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–∞—Ö. "
        "–û–Ω–∞ –≤–∏–¥–∏—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä SKU –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ø–æ—ç—Ç–æ–º—É –º–æ–∂–µ—Ç –ø–µ—Ä–µ–Ω–∏–º–∞—Ç—å "
        "–ø–∞—Ç—Ç–µ—Ä–Ω—ã –º–µ–∂–¥—É –ø–æ—Ö–æ–∂–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ (—ç—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç —Ä–µ–¥–∫–∏–º SKU).\n\n"
        "–ï—Å–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å ‚Äî –¥–ª—è –∫–∞–∂–¥–æ–≥–æ SKU —Å—Ç—Ä–æ–∏—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å.\n\n"
        "–ü–ª—é—Å—ã: —Ä–µ–¥–∫–∏–µ SKU –Ω–∞—á–∏–Ω–∞—é—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –ª—É—á—à–µ. "
        "–ú–∏–Ω—É—Å—ã: –≤—ã—à–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞—á–µ—Å—Ç–≤—É –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏ —Ä–∞–∑–º–µ—Ç–∫–∏ ‚Äî "
        "–æ—à–∏–±–∫–∏ –≤ –æ–¥–Ω–æ–º —Ç–æ–≤–∞—Ä–µ –º–æ–≥—É—Ç –Ω–µ–º–Ω–æ–≥–æ –≤–ª–∏—è—Ç—å –Ω–∞ –¥—Ä—É–≥–∏–µ."
    ),
)

calibrate_last_k = st.sidebar.number_input(
    "–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞: –ø–æ—Å–ª–µ–¥–Ω–∏–µ k —Ç–æ—á–µ–∫",
    min_value=0, max_value=24, value=6,
    help=(
        "–ü–æ—Å—Ç-–∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ p50: –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–≥–Ω–æ–∑–∞, —á—Ç–æ–±—ã p50 —Å–æ–≤–ø–∞–¥–∞–ª —Å–æ —Å—Ä–µ–¥–Ω–∏–º "
        "–ø–æ—Å–ª–µ–¥–Ω–∏—Ö k —Ñ–∞–∫—Ç–æ–≤. –£—Å—Ç—Ä–∞–Ω—è–µ—Ç ¬´level shift¬ª.\n"
        "0 ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å. –û—Ä–∏–µ–Ω—Ç–∏—Ä—ã: 3‚Äì6 –¥–ª—è monthly; 7‚Äì28 –¥–ª—è daily."
    ),
)

cal_clip_low = st.sidebar.number_input(
    "Calibrate clip low",
    min_value=0.1, max_value=2.0, value=0.6, step=0.05,
    help=(
        "–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ *–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞* –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–µ p50.\n"
        "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.60 = –º–∞–∫—Å–∏–º—É–º ‚àí40% –∫ —É—Ä–æ–≤–Ω—é –ø—Ä–æ–≥–Ω–æ–∑–∞.\n\n"
        "–ó–∞—á–µ–º: –Ω–µ –¥–∞—Ç—å –∫–∞–ª–∏–±—Ä–æ–≤–∫–µ —á—Ä–µ–∑–º–µ—Ä–Ω–æ –∑–∞–Ω–∏–∑–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑, –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ k –ø–µ—Ä–∏–æ–¥–æ–≤ –±—ã–ª–∏ –∞–Ω–æ–º–∞–ª—å–Ω–æ –Ω–∏–∑–∫–∏–º–∏.\n"
        "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: daily/–≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–µ ‚Äî –º–æ–∂–Ω–æ –æ–ø—É—Å—Ç–∏—Ç—å –¥–æ 0.5; —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ä—è–¥—ã ‚Äî –ø–æ–¥–Ω—è—Ç—å –¥–æ 0.8."
    ),
)

cal_clip_high = st.sidebar.number_input(
    "Calibrate clip high",
    min_value=0.1, max_value=3.0, value=1.4, step=0.05,
    help=(
        "–í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ *–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞* –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–µ p50.\n"
        "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1.40 = –º–∞–∫—Å–∏–º—É–º +40% –∫ —É—Ä–æ–≤–Ω—é –ø—Ä–æ–≥–Ω–æ–∑–∞.\n\n"
        "–ó–∞—á–µ–º: –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∑–∞–≤—ã—à–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞, –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ k –ø–µ—Ä–∏–æ–¥–æ–≤ –±—ã–ª–∏ –≤—Å–ø–ª–µ—Å–∫–æ–º.\n"
        "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: daily/–≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–µ ‚Äî –º–æ–∂–Ω–æ –ø–æ–¥–Ω—è—Ç—å –¥–æ 1.6; —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ ‚Äî —Å–Ω–∏–∑–∏—Ç—å –¥–æ 1.2‚Äì1.3."
    ),
)

promo_file = st.sidebar.file_uploader(
    "–ü–ª–∞–Ω –ø—Ä–æ–º–æ (–æ–ø—Ü.) CSV",
    type=["csv"],
    help=(
        "–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å –±—É–¥—É—â–∏–º–∏ –ø—Ä–æ–º–æ-–ø–µ—Ä–∏–æ–¥–∞–º–∏ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞. "
        "–û–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏: date, sku (–∏–ª–∏ ALL), promo_flag=1."
    ),
)

st.sidebar.markdown("---")
run_btn = st.sidebar.button(
    "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Forecast",
    help="–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–¥—Ä—è–¥ –≤—Å–µ —ç—Ç–∞–ø—ã: –ø–æ–¥–±–æ—Ä –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω), –æ–±—É—á–µ–Ω–∏–µ –∞–Ω—Å–∞–º–±–ª—è –∏ —Ä–∞—Å—á—ë—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞."
)


# ====== –û–≤–µ—Ä–ª–µ–π (–µ—Å–ª–∏ –∏–¥—ë—Ç —à–∞–≥) ======
if ss.is_running:
    st.markdown(f"""
    <div class="app-overlay">
      <div class="card">
        <div class="spinner"></div>
        <div>{ss.busy_msg}</div>
      </div>
    </div>
    """, unsafe_allow_html=True)

# ====== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞: —Å—Ç–∞–≤–∏–º —à–∞–≥ –∏ –¥–µ–ª–∞–µ–º rerun ======
if run_btn:
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ö–æ–¥–Ω–æ–π CSV
        if uploaded_csv is not None:
            input_path = save_uploaded_file(uploaded_csv, WORKDIR / "data.csv")
            ss.input_path = str(input_path)
        elif ss.input_path:
            input_path = Path(ss.input_path)
            if not input_path.exists():
                st.warning("–†–∞–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π CSV –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.")
                st.stop()
        else:
            st.warning("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π CSV.")
            st.stop()

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–ª–æ–Ω–∫–∏
        df_hist = pd.read_csv(ss.input_path)
        if "sku" not in df_hist.columns: df_hist["sku"] = "ALL"
        if "qty" not in df_hist.columns: raise ValueError("–í CSV –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ–ª–æ–Ω–∫–∞ 'qty'.")
        if "date" not in df_hist.columns: raise ValueError("–í CSV –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ–ª–æ–Ω–∫–∞ 'date' (YYYY-MM-DD).")
        if "promo_flag" not in df_hist.columns: df_hist["promo_flag"] = 0
        if "category" not in df_hist.columns: df_hist["category"] = "ALL"
        df_hist.to_csv(ss.input_path, index=False)

        # –ü—Ä–æ–º–æ-–ø–ª–∞–Ω (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if promo_file is not None:
            ss.promo_path = str(save_uploaded_file(promo_file, WORKDIR / "promo.csv"))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞ –≤ ss.params
        ss.params = dict(
            freq=freq, model_algo=model_algo, do_optimize=bool(do_optimize),
            trials=int(trials), horizon=int(horizon), cv=int(cv), eta=float(eta),
            lookback=int(lookback_months_val) if lookback_months_val > 0 else None,
            halflife=int(halflife_val) if halflife_val > 0 else None,
            joint=bool(joint), calibrate_last_k=int(calibrate_last_k),
            cal_clip_low=float(cal_clip_low), cal_clip_high=float(cal_clip_high),
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥ –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º
        ss.is_running = True
        if ss.params["do_optimize"]:
            ss.step = "optimize"; ss.busy_msg = f"–ó–∞–ø—É—Å–∫ HPO ({ss.params['model_algo']})‚Ä¶"
        else:
            ss.step = "train"; ss.busy_msg = "–û–±—É—á–µ–Ω–∏–µ –∞–Ω—Å–∞–º–±–ª—è‚Ä¶"
        st.rerun()

    except Exception:
        err_box.error("–û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:\n\n" + "".join(traceback.format_exc()))

# ====== –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π: –≤—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥–∏ –º–µ–∂–¥—É –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞–º–∏ ======
try:
    if ss.is_running and ss.step:
        p = ss.params
        if ss.step == "optimize":
            run_optimize(ss.input_path, p["model_algo"], p["freq"], p["horizon"], p["cv"], p["trials"])
            ss.step = "train"; ss.busy_msg = "–û–±—É—á–µ–Ω–∏–µ –∞–Ω—Å–∞–º–±–ª—è‚Ä¶"
            st.rerun()

        elif ss.step == "train":
            run_train(ss.input_path, p["freq"], p["horizon"], p["cv"], p["eta"], p["lookback"], p["halflife"])
            ss.step = "forecast"; ss.busy_msg = "–†–∞—Å—á—ë—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞‚Ä¶"
            st.rerun()

        elif ss.step == "forecast":
            model_path = str(Path(OUTDIR) / f"model_ensemble_{p['freq']}.joblib")
            run_forecast(ss.input_path, model_path, p["freq"], p["horizon"],
                         p["joint"], p["calibrate_last_k"], p["cal_clip_low"], p["cal_clip_high"],
                         ss.promo_path)

            # –†–µ–∑—É–ª—å—Ç–∞—Ç ‚Üí session_state
            ss.forecast_df = load_forecast_csv(p["freq"])
            ss.hist_df = pd.read_csv(ss.input_path)
            ss.freq = p["freq"]

            # SKU –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if ss.hist_df is not None:
                skus = sorted(ss.hist_df["sku"].astype(str).unique().tolist())
                if ss.sku_sel not in skus:
                    ss.sku_sel = skus[0] if skus else None

            # –ó–∞–≤–µ—Ä—à–∏–ª–∏
            ss.is_running = False
            ss.busy_msg = ""
            ss.step = None
            st.rerun()
except Exception:
    ss.is_running = False
    ss.busy_msg = ""
    ss.step = None
    err_box.error("–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞:\n\n" + "".join(traceback.format_exc()))

# ====== –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–±–ª—é—Ä–∏–º, –µ—Å–ª–∏ –∏–¥—ë—Ç —à–∞–≥) ======
st.markdown(f'<div class="{ "blurred" if ss.is_running else "" }">', unsafe_allow_html=True)

if ss.forecast_df is not None and ss.hist_df is not None:
    st.subheader("üìÑ –ü—Ä–æ–≥–Ω–æ–∑ (–ø–µ—Ä–≤—ã–µ 200 —Å—Ç—Ä–æ–∫)")
    st.dataframe(ss.forecast_df.head(200))

    csv_bytes = ss.forecast_df.to_csv(index=False).encode("utf-8")
    st.download_button(
        "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å forecast CSV",
        data=csv_bytes,
        file_name=f"forecast_{ss.freq or 'monthly'}.csv",
        mime="text/csv",
        key="download_forecast"
    )

    skus = sorted(ss.hist_df["sku"].astype(str).unique().tolist())
    default_index = skus.index(ss.sku_sel) if (ss.sku_sel in skus) else 0
    ss.sku_sel = st.selectbox("SKU –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞", skus, index=default_index, key="sku_select")

    df_h = ss.hist_df.copy(); df_f = ss.forecast_df.copy()
    df_h["date"] = pd.to_datetime(df_h["date"], errors="coerce")
    df_f["date"] = pd.to_datetime(df_f["date"], errors="coerce")
    c1, c2, c3 = st.columns(3)
    with c1:
        show_band = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å p10‚Äìp90", value=True, key="show_band")
    with c2:
        show_points = st.checkbox("–¢–æ—á–∫–∏ –Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏", value=True, key="show_points")
    with c3:
        show_promo = st.checkbox("–ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø—Ä–æ–º–æ", value=("promo_flag" in df_h.columns), key="show_promo")

    if ss.sku_sel is not None:
        plot_sku_interactive(df_h, df_f, ss.sku_sel,
                             show_band=show_band,
                             show_points=show_points,
                             show_promo=show_promo)

st.markdown('</div>', unsafe_allow_html=True)
